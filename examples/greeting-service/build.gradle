
buildscript {
    repositories {
        mavenLocal()
        maven { url "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath "jp.classmethod.aws:gradle-aws-plugin:0.37"
    }
}


plugins {
    id "java"
    id "application"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id("org.springframework.boot") version "2.1.0.RELEASE" apply false
    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "net.ltgt.apt" version "0.19"
}

apply plugin: 'jp.classmethod.aws.lambda'


repositories {
    mavenCentral()
}

sourceCompatibility = 1.8
targetCompatibility = 1.8
mainClassName = "aws.lambda.custom.runtime.micronaut.Application"

ext {
    micronautVersion = "1.0.2"
    micronautSpringVersion = "1.0.0.M1"
}

repositories {
    mavenLocal()
    maven { url "https://dl.bintray.com/micronaut/core-releases-local" }
    jcenter()
}



dependencyManagement {
    imports {
        mavenBom "io.micronaut:micronaut-bom:$micronautVersion"
        mavenBom(org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES)
    }
}

dependencies {
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    annotationProcessor "io.micronaut.configuration:micronaut-openapi"
    annotationProcessor "io.micronaut.spring:micronaut-spring-boot-annotation:$micronautSpringVersion"
    annotationProcessor "io.micronaut.spring:micronaut-spring-web-annotation:$micronautSpringVersion"
    compileOnly 'com.oracle.substratevm:svm:1.0.0-rc8'
    compile "io.swagger.core.v3:swagger-annotations:2.0.4"
    compile "io.micronaut:micronaut-inject"
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("io.micronaut:micronaut-http-server")
    compile("io.micronaut:micronaut-http-server-netty")
    runtime "ch.qos.logback:logback-classic:1.2.3"
    runtime "io.micronaut:micronaut-graal"

    // uncomment the following to restore Spring Boot as the application executor
//    runtime("org.springframework.boot:spring-boot-starter-tomcat")
//    runtime 'javax.servlet:javax.servlet-api:4.0.0'

    // for java 10
    compile 'javax.annotation:javax.annotation-api:1.3.2'


    compile "io.micronaut:micronaut-http-client:1.0.1"
    compile "com.amazonaws:aws-lambda-java-core:1.2.0"
    compile "com.amazonaws:aws-lambda-java-events:2.2.4"

    compile "com.agorapulse:micronaut-function-aws-agp:1.0.0"



    // due to graal bug, revisit after rc9
    //compile "com.jcraft:jzlib:1.1.3"

    testCompile("com.github.tomakehurst:wiremock:2.19.0")
    testCompile("io.micronaut:micronaut-http-client")
    testCompile("io.micronaut.test:micronaut-test-junit5:1.0.0")
    testCompile "io.micronaut:micronaut-inject-java"
    testCompile "org.mockito:mockito-junit-jupiter:2.22.0"
    testRuntime "org.junit.jupiter:junit-jupiter-engine:5.1.0"
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
}

shadowJar {
    mergeServiceFiles()
}



compileJava.options.compilerArgs += '-parameters'
compileTestJava.options.compilerArgs += '-parameters'

test {
    useJUnitPlatform()
}


//task awsLambdaRuntime(type: Zip) {
//
//    baseName = 'greeting'
//    fileMode = 755
//
//    from('.') {
//        include {
//            'bootstrap'
//            'greeting-service'
//        }
//    }
//}
//
//task deploy(type: AWSLambdaMigrateFunctionTask, dependsOn: awsLambdaRuntime) {
//    functionName = "hello-world"
//    handler = "example.HelloWorldFunction::hello"
//    role = "arn:aws:iam::${aws.accountId}:role/lambda_basic_execution"
//    runtime = "provided"
//    zipFile = shadowJar.archivePath
//    memorySize = 256
//    timeout = 60
//}
//
//task invoke(type: AWSLambdaInvokeTask) {
//    functionName = "hello-world"
//    invocationType = InvocationType.RequestResponse
//    payload = '{"name":"Fred"}'
//    doLast {
//        println "Lambda function result: " + new String(invokeResult.payload.array(), "UTF-8")
//    }
//}
